package com.viorsan.lifetimeline.utils;

import android.content.Context;
import android.content.SharedPreferences;
import android.os.Build;

import com.viorsan.lifetimeline.R;

import java.util.UUID;

import timber.log.Timber;

/**
 * Created by Dmitriy Kazimirov, e-mail:dmitriy.kazimirov@viorsan.com on 11.08.15.
 * Class to support access to shared preferences
 */
public class SettingsStore {
    public static final String TAG = SettingsStore.class.getName();

    public static final String PREFERENCE_DEVICE_ID = "DeviceID";
    Context context;
    SharedPreferences sharedPreferences;
    SettingsStore(Context context) {
        this.context=context;
        this.sharedPreferences= this.context.getSharedPreferences(
                this.context.getString(R.string.preferencesKey), Context.MODE_PRIVATE);
        Timber.tag(TAG);
        Timber.d("DeviceID:"+getDeviceId());
        Timber.d("BuildID:"+getBuildId());
        Timber.d("Device:"+getDeviceInfoString());
    }

    /**
     * Gets user-readable device identification string
     * @return user-readable device identification string
     */
    public String getDeviceInfoString() {
        StringBuilder stringBuilder=new StringBuilder();
        stringBuilder.append(Build.MODEL);
        stringBuilder.append(" from ");
        stringBuilder.append(Build.BRAND);
        return  stringBuilder.toString();
    }

    /**
     * Returin OS buildID (current Build.DISPLAY)
     * @return OS buildID
     */
    public String getBuildId() {
        return Build.DISPLAY;
    }
    /**
     * Generates persistent device identifier (if possible it's Build.SERIAL)
     * @return deviceId
     */
    public String getDeviceId() {
        String deviceId;
        deviceId=Build.SERIAL;

        if ((deviceId==null) || (deviceId.equals("unknown"))) {
            deviceId=readString(PREFERENCE_DEVICE_ID, "AUTOGENERATED:"+ UUID.randomUUID().toString());
        }
        if (deviceId.equals("unknown")) {
            deviceId="AUTOGENERATED:"+UUID.randomUUID().toString();
        }
        writeString(PREFERENCE_DEVICE_ID,deviceId);
        return deviceId;
    }

    /**
     * Reads string from preferences
     * @param key key to use
     * @param defaultValue default value
     * @return string from preferences
     */
    public String readString(String key,String defaultValue) {
        return sharedPreferences.getString(key,defaultValue);
    }

    /**
     * Writes string to preferences
     * @param key key to write in
     * @param value value to write
     */
    public void writeString(String key,String value) {
        SharedPreferences.Editor editor=sharedPreferences.edit();
        editor.putString(key,value);
        editor.commit();
    }
    /**
     * Reads boolean value from preferences
     * @param key key to use
     * @param defaultValue default value
     * @return boolean value from preferences
     */
    public Boolean readBoolean(String key,Boolean defaultValue) {
        return sharedPreferences.getBoolean(key,defaultValue);
    }
    /**
     * Writes boolean value to preferences
     * @param key key to write in
     * @param value value to write
     */
    public void writeBoolean(String key,Boolean value) {
        SharedPreferences.Editor editor=sharedPreferences.edit();
        editor.putBoolean(key,value);
        editor.commit();
    }
    /**
     * Reads int value from preferences
     * @param key key to use
     * @param defaultValue default value
     * @return int value from preferences
     */
    public int readInt(String key,int defaultValue) {
        return sharedPreferences.getInt(key, defaultValue);
    }
    /**
     * Writes integer value to preferences
     * @param key key to write in
     * @param value value to write
     */
    public void writeInt(String key,int value) {
        SharedPreferences.Editor editor=sharedPreferences.edit();
        editor.putInt(key, value);
        editor.commit();
    }
    /**
     * Reads float value from preferences
     * @param key key to use
     * @param defaultValue default value
     * @return float value from preferences
     */
    public float readFloat(String key,float defaultValue) {
        return sharedPreferences.getFloat(key, defaultValue);
    }
    /**
     * Writes float value to preferences
     * @param key key to write in
     * @param value value to write
     */
    public void writeFloat(String key,float value) {
        SharedPreferences.Editor editor=sharedPreferences.edit();
        editor.putFloat(key, value);
        editor.commit();
    }
    /**
     * Reads long value from preferences
     * @param key key to use
     * @param defaultValue default value
     * @return long from preferences
     */
    public long readLong(String key,long defaultValue) {
        return sharedPreferences.getLong(key, defaultValue);
    }
    /**
     * Writes long value to preferences
     * @param key key to write in
     * @param value value to write
     */
    public void writeLong(String key,long value) {
        SharedPreferences.Editor editor=sharedPreferences.edit();
        editor.putLong(key, value);
        editor.commit();
    }

    /**
     * Erases specified key from preferences
     * @param key
     */
    public void deleteKey(String key) {
        SharedPreferences.Editor editor=sharedPreferences.edit();
        editor.remove(key);
        editor.commit();
    }

}

